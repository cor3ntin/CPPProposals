<pre class='metadata'>
Title: Deprecate uses of the comma operator in subscripting expressions
Shortname: D1161
Level: 0
Status: D
Group: wg21
Editor: Corentin Jabot, corentin.jabot@gmail.com
URL: https://cor3ntin.github.io/CPPProposals/deprecate_comma_subscript/P0000.html
Abstract: We propose to deprecate the use of the comma operator in subscripting expressions it is not very useful, is confusing and limits the future evolution of the standard.
Audience: EWG
Markup Shorthands: markdown yes
Default Highlight: CPP
Line Numbers: no
Date: 2018-07-01
</pre>

<style>

.tony-table table {
    width:100%;
}

.tony-table th {
    text-align: center;
    padding-right:20px;
}

.tony-table  td {
    vertical-align:top;
}

.wording-add {
    background-color: #F6F9ED;
}


/* Table */
.data-table {
	border-collapse: collapse;
	font-size: 14px;
	min-width: 573px;
}
.data-table th {
	color: #5a5a5a;
}

.data-table th,
.data-table td {
	padding: 7px 17px;
}
.data-table caption {
	margin: 7px;
}

/* Table Header */
.data-table thead th {
    border-bottom: 2px solid #CCCCCC;
}

/* Table Body */
.data-table tbody td {
	color: #353535;
	border-bottom: 1px solid #dcdcdc;
	text-align: right;
}

.data-table tbody tr:last-child td {
	border: 0;
}

.data-table tbody tr:hover td {
	background-color: #f7f7f7;
	transition: all .2s;
}

/* Table Footer */
.data-table tfoot th {
	border-top: 1px solid #c7c7c7;
	text-align: right;
}

.array_row {
    outline: thin solid #008000
}

</style>


Introduction {#intro}
=====================

This paper proposes that the use of a comma operator within a subscripting expression be deprecated.
Doing so opens the door to multidimensional subscript operators for classes such as `mdspan`.

<table class="tony-table">
<tr> <th> Current </th> <th> Proposed </th </tr>
<!-- C++17 -->
<tr> <td>
<pre>

 array[x]     // Ok
 array[(x,y)] // Ok, uses y as index/key
 array[x,y]   // Ok, uses y as index/key

</pre>
</td>

<td>
<pre>

array[x]      // Ok
array[(x,y)]  // Ok, uses y as index/key
array[x,y]   // <b>Deprecated</b> , uses y as index/key

</pre> </td> </tr>
</table>


Motivation
==========

Currently, a comma can appear in subscript expressions such that `auto z = foo[x, y]` calls the comma operator with `y` as the argument.
While this is currently unambiguous, it is confusing when encountered and error-prone when used.

The authors think this syntax would be more useful and suited to index multidimensional classes such as `mdspan`.

<xmp>
  mdspan<int, array_property::dimension<2, 3, 5>> foo(/*...*/);
  int value = foo[1, 2, 3];
</xmp>

We do not propose to make this possible until a reasonable deprecation period has passed.

It is important to note that the goal is not to special-casing the meaning of a comma within a subscript expression.
Indeed, the standard defines that:

> In contexts where comma is given a special meaning,
> *[ Example: in lists of arguments to functions ([expr.call]) and lists of initializers ([dcl.init]) — end example ]*
> the comma operator as described in this subclause can appear only in parentheses.

So simply by supporting multiple parameters, a comma within a subscript operator
would serve as an argument separator, without the need for specific wording or parsing.

## The need for a multidimensional subscript operator


The classes that can benefit from a multidimensional subscript operator are higher-dimensions variants of
classes that define a single-dimension subscript operator: matrixes, views, geometric entities, graphics APIs...

`mdspan` comes immediately to mind. Note that because there is no multidimensional subscript operator in the standard,
`mdspan` uses the call operator. While this is functionally equivalent to what a multidimensional subscript operator would
be, it does not carry the same semantic, making the code harder to read and reason about.
It also encourages non-semantical operator overloading.

## What a multidimensional subscript operator would look like


This paper does not propose a multidimensional subscript operator, yet, it's interesting to look at what it would look like.
The most logical thing to do would be to mirror the call operator syntax.

<xmp>
template <typename DataType>
class mdspan {
  using reference = /*...*/;
  template<size_t...>
  reference operator[]( IndexType ... indices ) const noexcept;
};

mdspan<int[1][2][3]> foo = /*....*/;
auto bar = foo[0, 1, 2];
</xmp>

This syntax resembles that of a call operator, but with the proper semantics.
A similar syntax can be found in popular languages such as Python, D and Ruby.

Impact on existing code bases
=============================

We analyzed several large open source codebases and did not find a significant use of this pattern.
<a href="https://github.com/cor3ntin/clang-tools-extra/tree/detect-comma-in-subscript">The tool used</a> is available
on Github and automatic refactoring of large code bases is possible.
In all cases, `array[x,y,z]` can be refactored in `array[(x,y,z)]` without alteration of semantics or behavior.

The codebases analyzed include the Linux kernel, Chromium, the LLVM project and the entirety of the Boost test suite.
The only instances found were in Boost's "Spirit Classic" library (deprecated since 2009).
A documentation of the offending syntax can be found <a href="https://www.boost.org/doc/libs/1_35_0/libs/spirit/doc/switch_parser.html">here</a>.


Alternative approaches
======================

## Allow comma expression only in C arrays

To maintain compatibility with C, it would be possible to deprecate the use of the comma operator only in overloaded operators.
Example:
<pre>
  int c_array[1];
  c_array[1,0];   // <b>not</b> deprecated

  std::array&lt;int, 1> cpp_array;
  cpp_array[1,0];   // <b>deprecated</b>
</pre>

However, this would probably lead to more confusion for a feature that is virtually unused.

## Alternative syntax for multidimensional subscript expressions


It has been proposed that `array[x][y]` should be equivalent to `array.operator[](x, y);`
<xmp>
    mdspan<int, array_property::dimension<2,3>> foo;
    auto x = foo[0][0]; //equivalent to foo(0, 0); <========== This looks weird, fix it somehow.
                                                   <========== I had to read it 3 times before I figured out you don't mean the call operator
</xmp>

However, it's easy to imagine a scenario such that `(array[x])[y]` would be a valid expression.
For example:

<xmp>
    struct row {
        Foo & operator[size_t];
    };
    struct grid {
        row & operator[size_t] const;
        const Foo & operator[size_t, size_t] const;
    };
    grid g;
</xmp>

In this somewhat artificial example, `g[0][0]` and `(g[0])[0]` would be 2 valid, different expressions,
which is confusing.
Moreover, making this syntax compatible with pack expansion and fold expressions would certainly prove challenging.

On the other hand, this syntax mirror the usage of multidimensional C arrays and is also popular in
other languages, such as Perl.


## Other comma expressions

Early feedback on this paper suggested we might want to deprecate comma expressions in more contexts.
While the authors of this paper are not suggesting that, for completeness, we analyzed a few open source projects.

Below are tables of contexts in which comma expressions are found in various open source projects.
The data was generated with the clang-tidy. It is meant to give a rough idea of the ways comma expressions are used
and does not pretend to be completely accurate.

We provide two tables.
The first counts each expression encountered throughout a project exactly one and as such gives an idea of the amount of code that would
have to be modified to conform to some eventual deprecation.

### Without duplication caused by headers included multiple times throughout a project

<table class='data-table'><thead><tr><th>Parent Expression</th>
<th>Boost</th>
<th>Chromium</th>
<th>Firefox</th>
<th>Kernel</th>
<th>Libreoffice</th>
<th>LLVM</th>
<th>Qt</th>
<th></th><th><small>Estimated LOC affected*</small></th></tr></thead><tbody>
<tr><td>ParenExpr</td><td>958</td><td>7717</td><td>4360</td><td>72</td><td>9375</td><td>70</td><td>1494</td><td>24046</td><td> <small> 0.030%-0.080% </small> </td>
</tr>
<tr><td>ForStmt</td><td>764</td><td>2916</td><td>1461</td><td>565</td><td>3275</td><td>919</td><td>2616</td><td>12516</td><td> <small> 0.016%-0.042% </small> </td>
</tr>
<tr><td>CompoundStmt</td><td>190</td><td>239</td><td>62</td><td>12</td><td>182</td><td>4</td><td>63</td><td>752</td><td> <small> 0.001%-0.003% </small> </td>
</tr>
<tr><td>ReturnStmt</td><td>160</td><td>329</td><td>53</td><td>-</td><td>53</td><td>6</td><td>92</td><td>693</td><td> <small> 0.001%-0.002% </small> </td>
</tr>
<tr><td>WhileStmt</td><td>69</td><td>19</td><td>4</td><td>-</td><td>66</td><td>-</td><td>14</td><td>172</td><td>~</td>
</tr>
<tr><td>IfStmt</td><td>31</td><td>51</td><td>11</td><td>-</td><td>30</td><td>1</td><td>-</td><td>124</td><td>~</td>
</tr>
<tr><td>ConditionalOperator</td><td>12</td><td>17</td><td>18</td><td>-</td><td>36</td><td>-</td><td>17</td><td>100</td><td>~</td>
</tr>
<tr><td>CaseStmt</td><td>-</td><td>7</td><td>-</td><td>-</td><td>20</td><td>-</td><td>-</td><td>27</td><td>~</td>
</tr>
<tr><td>DoStmt</td><td>1</td><td>10</td><td>1</td><td>-</td><td>1</td><td>-</td><td>-</td><td>13</td><td>~</td>
</tr>
<tr><td>CXXStaticCastExpr</td><td>5</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>5</td><td>~</td>
</tr>
<tr class="array_row"><td>ArraySubscriptExpr</td><td>1<sup><a href="#fn1" id="ref1">1</a></sup></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>1<sup><a href="#fn1" id="ref1">1</a></sup></td><td>~</td>
</tr>
<tr><td>DefaultStmt</td><td>-</td><td>-</td><td>-</td><td>-</td><td>1</td><td>-</td><td>-</td><td>1</td><td>~</td>
</tr>
</tbody></table>


<b>Estimated 30 to 80 millions LOC compiled. This is a back of the envelop calculation meant to be an order of magnetude rather that a meaningful, accurate value</b>.

### Non-Deduplicated results.

This second table represents the number of warnings that would be emitted following some eventual deprecation.

<table class='data-table'><thead><tr><th>Parent Expression</th>
<th>Boost</th>
<th>Chromium</th>
<th>Firefox</th>
<th>Kernel</th>
<th>Libreoffice</th>
<th>LLVM</th>
<th>Qt</th>
<th></th></tr></thead><tbody>
<tr><td>ParenExpr</td><td>167038</td><td>69625</td><td>100295</td><td>924</td><td>55551</td><td>1451</td><td>6045</td><td>400929</td>
</tr>
<tr><td>ForStmt</td><td>106372</td><td>139460</td><td>99515</td><td>4114</td><td>12876</td><td>13343</td><td>11464</td><td>387144</td>
</tr>
<tr><td>ReturnStmt</td><td>55417</td><td>20353</td><td>1253</td><td>-</td><td>455</td><td>46</td><td>17636</td><td>95160</td>
</tr>
<tr><td>WhileStmt</td><td>11179</td><td>33</td><td>10</td><td>-</td><td>66</td><td>-</td><td>8822</td><td>20110</td>
</tr>
<tr><td>ConditionalOperator</td><td>11894</td><td>17</td><td>18</td><td>-</td><td>182</td><td>-</td><td>17</td><td>12128</td>
</tr>
<tr><td>CompoundStmt</td><td>8995</td><td>335</td><td>254</td><td>12</td><td>341</td><td>4</td><td>314</td><td>10255</td>
</tr>
<tr><td>IfStmt</td><td>504</td><td>54</td><td>26</td><td>-</td><td>359</td><td>1</td><td>-</td><td>944</td>
</tr>
<tr><td>CXXStaticCastExpr</td><td>653</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>653</td>
</tr>
<tr><td>DoStmt</td><td>18</td><td>14</td><td>34</td><td>-</td><td>1</td><td>-</td><td>-</td><td>67</td>
</tr>
<tr><td>CaseStmt</td><td>-</td><td>7</td><td>-</td><td>-</td><td>35</td><td>-</td><td>-</td><td>42</td>
</tr>
<tr class="array_row"><td>ArraySubscriptExpr</td><td>4 <sup><a href="#fn1" id="ref1">1</a></sup></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>4<sup><a href="#fn1" id="ref1">1</a></sup></td>
</tr>
<tr><td>DefaultStmt</td><td>-</td><td>-</td><td>-</td><td>-</td><td>4</td><td>-</td><td>-</td><td>4</td>
</tr>
</tbody></table>

<sup id="fn1">1. The only instances found where in boost's "Spirit Classic" library (deprecated since 2009).A documentation of the offending syntax can be found <a href="https://www.boost.org/doc/libs/1_35_0/libs/spirit/doc/switch_parser.html"> here</a>.<a href="#ref1">↩</a></sup>




Proposed Wording
================

In annex D, add a new Paragraph

<div class="wording-add">
<b> Comma operator in subscript expressions</b>
Comma operator expressions in subscript expressions are deprecated.
[Note: a comma appearing in parenthesis is not deprecated]
<br />
[Example:
<xmp>
    a[b,c];   //deprecated
    a[(b,c)]; // Not deprecated
</xmp>]
</div>

In 8.5.19 [expr.comma], add a paragraph
<div class="wording-add">
[Note: In subscript expressions, the comma operator is deprecated. See [depr.comma-subscript]]
</div>

Add a paragraph after 8.5.1.1.2 [expr.sub]

<div class="wording-add">
[Note: In subscript expressions, the comma operator is deprecated. See [depr.comma-subscript]]
</div>

# Acknowledgments
Thanks to Martin Hořeňovský who computed some of the statistics on comma operator usages presented in this paper.

Thanks to Titus Winters and JF Bastien who provided useful feedbacks and criticism.

